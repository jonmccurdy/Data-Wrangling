[
  {
    "objectID": "Lecture-2.html",
    "href": "Lecture-2.html",
    "title": "2  Introducing Databases",
    "section": "",
    "text": "2.1 Connecting to a Database\nIn the real world, data is rarely small or neatly organized, so knowing how to work with databases is essential for any data scientist. Databases help us store, organize, and access large amounts of data efficiently. They can contain multiple related tables, which keeps data consistent and avoids duplication. Databases also let us query data quickly, handle large datasets, and allow multiple users to access the data at the same time. In this lecture, we’ll use a database stored on our local computer, but the skills and syntax apply to databases on company servers as well.\nDownload the following sample database that we will be using for this lecture. I recommend creating a “Data-330” folder that will house all of the files that we use throughout this semester. This can be done by creating an R project and moving the file to the correct folder.\nNow that we have the database that we would like to use we can open a connection to it. This is important because the database itself is not loaded into R; instead, the connection object allows us to read, write, and query data without loading the entire database into memory. To make this connection we will use the dbConnect() function. The SQLite() command tells R that the database we will be accessing is a SQLite database (there are many different kinds of databases, we will stick with this one for now). Finally, the “college.db” command is the path to the database file in the current working directory that we would like to access.\ndb_con &lt;- dbConnect(SQLite(), \"college.db\")",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introducing Databases</span>"
    ]
  },
  {
    "objectID": "Lecture-2.html#database-properties",
    "href": "Lecture-2.html#database-properties",
    "title": "2  Introducing Databases",
    "section": "2.2 Database Properties",
    "text": "2.2 Database Properties\nOnce we have connected to the database we will see it appear in our global environment. Notice though that if you click the object no data will appear, queries are required to pull the data into R. If you want to see what tables are present in the database you can use the dbListTables() function with your database connection passed into it. The output shows that the database currently contains three tables: Courses, Enrollments, and Students\n\ndbListTables(db_con)\n\n[1] \"Courses\"     \"Enrollments\" \"Students\"   \n\n\nIf we want to dive further into the tables and see each table contains we can use the dbListFields()function, passing the database connection and the table name as arguments. In the example below we can see the Courses table contains the course_id, the course_name, and the number of credits it is. Likewise we can learn about the other tables using the same code.\n\ndbListFields(db_con, \"Courses\")\n\n[1] \"course_id\"   \"course_name\" \"credits\"    \n\ndbListFields(db_con, \"Enrollments\")\n\n[1] \"student_id\" \"course_id\"  \"grade\"     \n\ndbListFields(db_con, \"Students\")\n\n[1] \"student_id\" \"name\"       \"major\"      \"gpa\"        \"year\"",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introducing Databases</span>"
    ]
  },
  {
    "objectID": "Lecture-2.html#accessing-tables-within-a-database",
    "href": "Lecture-2.html#accessing-tables-within-a-database",
    "title": "2  Introducing Databases",
    "section": "2.3 Accessing Tables within a Database",
    "text": "2.3 Accessing Tables within a Database\nIf we wan to access the tables within the database we can use the tbl() function while calling both the database connection and the table name. Notice in the output below that the data is not actually in R, it is just a reference to the table and does not contain all of the data in R, it is showing a snippet of the first few rows in the table. This can be seen with the “Enrollments” and “Students” tables as it is not quite sure how many rows are present.\n\ntbl(db_con, \"Courses\")\n\n# Source:   table&lt;`Courses`&gt; [10 x 3]\n# Database: sqlite 3.50.4 [C:\\Data-330-Book\\college.db]\n   course_id course_name            credits\n       &lt;int&gt; &lt;chr&gt;                    &lt;int&gt;\n 1         1 Intro to R                   3\n 2         2 Biology 101                  3\n 3         3 World History                3\n 4         4 Algorithms                   4\n 5         5 Calculus I                   4\n 6         6 Psychology of Learning       3\n 7         7 Microeconomics               3\n 8         8 Literary Analysis            3\n 9         9 Statistics                   4\n10        10 Machine Learning             4\n\ntbl(db_con, \"Enrollments\")\n\n# Source:   table&lt;`Enrollments`&gt; [?? x 3]\n# Database: sqlite 3.50.4 [C:\\Data-330-Book\\college.db]\n   student_id course_id grade\n        &lt;int&gt;     &lt;int&gt; &lt;chr&gt;\n 1          1         8 C    \n 2          1         9 C+   \n 3          1         1 C+   \n 4          1        10 C+   \n 5          1         5 B+   \n 6          2        10 A-   \n 7          2         1 A    \n 8          3        10 C    \n 9          3         5 B    \n10          4        10 B    \n# ℹ more rows\n\ntbl(db_con, \"Students\")\n\n# Source:   table&lt;`Students`&gt; [?? x 5]\n# Database: sqlite 3.50.4 [C:\\Data-330-Book\\college.db]\n   student_id name             major              gpa year     \n        &lt;int&gt; &lt;chr&gt;            &lt;chr&gt;            &lt;dbl&gt; &lt;chr&gt;    \n 1          1 Olivia Miller    Business          3.29 Freshman \n 2          2 Stacy Roberts    Math              3.81 Sophomore\n 3          3 Nate Anderson    Math              3.37 Junior   \n 4          4 Claire Young     English           3.76 Freshman \n 5          5 Jake Young       History           2.97 Sophomore\n 6          6 Rachel Foster    Biology           3.56 Sophomore\n 7          7 Victor Underwood Biology           2.9  Freshman \n 8          8 Kate Owens       Biology           3.39 Senior   \n 9          9 Evelyn Ingram    Computer Science  3.22 Senior   \n10         10 Thomas Owens     Biology           2.9  Senior   \n# ℹ more rows\n\n\nIf we want to actually pull the table from the database and have it accessible in R then we will need to use the collect() function. In the code below we can see that we pull the data from the database and save it to some variable. We can then look at the first few observations (you can look at all of it, I am only looking at the first few as I do not want to display them all). We can also look at the dimensions of the table, which shows that there are 50 students at the college.\n\nstudents_table &lt;- tbl(db_con, \"Students\") |&gt; collect()\nstudents_table |&gt; head()\n\n# A tibble: 6 × 5\n  student_id name          major      gpa year     \n       &lt;int&gt; &lt;chr&gt;         &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;    \n1          1 Olivia Miller Business  3.29 Freshman \n2          2 Stacy Roberts Math      3.81 Sophomore\n3          3 Nate Anderson Math      3.37 Junior   \n4          4 Claire Young  English   3.76 Freshman \n5          5 Jake Young    History   2.97 Sophomore\n6          6 Rachel Foster Biology   3.56 Sophomore\n\nstudents_table |&gt; dim()\n\n[1] 50  5",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introducing Databases</span>"
    ]
  },
  {
    "objectID": "Lecture-2.html#filtering-a-table",
    "href": "Lecture-2.html#filtering-a-table",
    "title": "2  Introducing Databases",
    "section": "2.4 Filtering a Table",
    "text": "2.4 Filtering a Table\nTypically with databases we use a language called SQL (pronounced either “S-Q-L” or “sequel”) which allows us to efficiently query a database. We can either use that language, or dplyr to filter, sort, and summarize the dataset. We can see both examples below where we are selecting all of the columns from the Students table and showing only the rows where the gpa is greater than 3.5. When we use the dbGetQuery() function we pass the database connection and the SQL query we want to run and the output is a dataframe in R. When we use the tbl() function alongside the dplyr commands the output is a reference to a table within the database. We would need to use the collect() function to load the actual data into R. The second way can be beneficial with large datasets as we do not pull the data into R until we explicitly call collect(), which can save memory and computation time.\n\ndbGetQuery(db_con, \"SELECT * FROM Students WHERE gpa &gt; 3.5\")\n\n   student_id           name      major  gpa      year\n1           2  Stacy Roberts       Math 3.81 Sophomore\n2           4   Claire Young    English 3.76  Freshman\n3           6  Rachel Foster    Biology 3.56 Sophomore\n4          12  Victor Parker Psychology 3.87    Senior\n5          13    Yara Turner   Business 3.85  Freshman\n6          16   Stacy Hughes Psychology 3.98  Freshman\n7          18   Yara Vasquez Psychology 3.91    Junior\n8          25  Isabela Brown Psychology 3.94    Senior\n9          29  Quinn Vasquez   Business 3.82  Freshman\n10         37 Grant Williams Psychology 3.51    Junior\n11         39 Isabela Hughes    English 3.55    Junior\n12         42      Uma Young    Biology 3.73  Freshman\n13         43   Grant Nelson       Math 3.88  Freshman\n14         45   Frank Nelson    English 3.94  Freshman\n15         46     Yara Green    English 3.59    Junior\n16         47      Ben Clark    English 3.53 Sophomore\n\ntbl(db_con, \"Students\") |&gt; filter(gpa &gt; 3.5)\n\n# Source:   SQL [?? x 5]\n# Database: sqlite 3.50.4 [C:\\Data-330-Book\\college.db]\n   student_id name           major        gpa year     \n        &lt;int&gt; &lt;chr&gt;          &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;    \n 1          2 Stacy Roberts  Math        3.81 Sophomore\n 2          4 Claire Young   English     3.76 Freshman \n 3          6 Rachel Foster  Biology     3.56 Sophomore\n 4         12 Victor Parker  Psychology  3.87 Senior   \n 5         13 Yara Turner    Business    3.85 Freshman \n 6         16 Stacy Hughes   Psychology  3.98 Freshman \n 7         18 Yara Vasquez   Psychology  3.91 Junior   \n 8         25 Isabela Brown  Psychology  3.94 Senior   \n 9         29 Quinn Vasquez  Business    3.82 Freshman \n10         37 Grant Williams Psychology  3.51 Junior   \n# ℹ more rows",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introducing Databases</span>"
    ]
  },
  {
    "objectID": "Lecture-2.html#arranging-a-table",
    "href": "Lecture-2.html#arranging-a-table",
    "title": "2  Introducing Databases",
    "section": "2.5 Arranging a Table",
    "text": "2.5 Arranging a Table\nIn the code below we select 3 columns and then arrange (order) them by their gpa in descending order. We save the result to a variable and display only the first few rows to keep the output concise.\n\norder_gpa_query &lt;- \"SELECT student_id, name, gpa FROM Students ORDER BY gpa DESC\"\nordered_gpa &lt;- dbGetQuery(db_con, order_gpa_query)\nhead(ordered_gpa)\n\n  student_id          name  gpa\n1         16  Stacy Hughes 3.98\n2         25 Isabela Brown 3.94\n3         45  Frank Nelson 3.94\n4         18  Yara Vasquez 3.91\n5         43  Grant Nelson 3.88\n6         12 Victor Parker 3.87\n\ntbl(db_con, \"Students\") |&gt; select(student_id, name, gpa) |&gt; \n        arrange(desc(gpa)) |&gt; \n        collect()\n\n# A tibble: 50 × 3\n   student_id name            gpa\n        &lt;int&gt; &lt;chr&gt;         &lt;dbl&gt;\n 1         16 Stacy Hughes   3.98\n 2         25 Isabela Brown  3.94\n 3         45 Frank Nelson   3.94\n 4         18 Yara Vasquez   3.91\n 5         43 Grant Nelson   3.88\n 6         12 Victor Parker  3.87\n 7         13 Yara Turner    3.85\n 8         29 Quinn Vasquez  3.82\n 9          2 Stacy Roberts  3.81\n10          4 Claire Young   3.76\n# ℹ 40 more rows",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introducing Databases</span>"
    ]
  },
  {
    "objectID": "Lecture-2.html#joining-tables",
    "href": "Lecture-2.html#joining-tables",
    "title": "2  Introducing Databases",
    "section": "2.6 Joining Tables",
    "text": "2.6 Joining Tables\nSince we are working with multiple tables, it might be beneficial to join them together. Before we attempt this with our database we will look at a basic example to try and see how it can be done. In the code below we have 5 different products, showing the product id along with the product name, and 6 different orders, showing the order number, product id, and the quantity bought.\n\nproducts &lt;- data.frame(\n  product_id = 1:5,\n  product_name = c(\"Laptop\", \"Phone\", \"Tablet\", \"Monitor\", \"Candybar\")\n)\n\n# Orders table\norders &lt;- data.frame(\n  order_id = 101:106,\n  product_id = c(1, 2, 2, 3, 4, 13),\n  quantity = c(2, 1, 3, 2, 1, 1)\n)\n\nproducts\n\n  product_id product_name\n1          1       Laptop\n2          2        Phone\n3          3       Tablet\n4          4      Monitor\n5          5     Candybar\n\norders\n\n  order_id product_id quantity\n1      101          1        2\n2      102          2        1\n3      103          2        3\n4      104          3        2\n5      105          4        1\n6      106         13        1\n\n\nKeeping these tables separate instead of combining them into one large table avoids duplication, simplifies updates (e.g., changing a product name), makes data easier to manage, and facilitates analysis.\nWe can notice that product_id is present in both tables, allowing us to combine the two tables using that variable as the common element. For this we will use the inner_join() function which will return only the rows that match in both tables. Notice that the product “Candybar” did not appear in the joined list, and neither did order “106” which bought product “13” (as these orders/products are not present in both lists). There are other types of join functions as well, such as left, right, and full joins, which combine tables in a way that preserves unmatched rows from one or both tables depending on the type of join.\n\ninner_join(orders, products, by = \"product_id\")\n\n  order_id product_id quantity product_name\n1      101          1        2       Laptop\n2      102          2        1        Phone\n3      103          2        3        Phone\n4      104          3        2       Tablet\n5      105          4        1      Monitor\n\n\nIn the code below we show both how it can be done in SQL and dplyr. In the SQL query, we join Students with Enrollments using student_id as the common key, and then join Enrollments with Courses using course_id. After that we are only selecting the name, course_name, and grade variables.\n\ncombine_query &lt;- \"SELECT Students.name, Courses.course_name, Enrollments.grade\n                  FROM Students\n                  JOIN Enrollments ON Students.student_id = Enrollments.student_id\n                  JOIN Courses ON Enrollments.course_id = Courses.course_id\"\n\ncombined_tables &lt;- dbGetQuery(db_con, combine_query)\nhead(combined_tables)\n\n           name       course_name grade\n1 Olivia Miller        Intro to R    C+\n2 Olivia Miller        Calculus I    B+\n3 Olivia Miller Literary Analysis     C\n4 Olivia Miller        Statistics    C+\n5 Olivia Miller  Machine Learning    C+\n6 Stacy Roberts        Intro to R     A\n\n# dplyr\ntbl(db_con, \"Students\") |&gt;\n  inner_join(tbl(db_con, \"Enrollments\"), by = \"student_id\") |&gt;\n  inner_join(tbl(db_con, \"Courses\"), by = \"course_id\") |&gt;\n  select(name, course_name, grade)\n\n# Source:   SQL [?? x 3]\n# Database: sqlite 3.50.4 [C:\\Data-330-Book\\college.db]\n   name          course_name       grade\n   &lt;chr&gt;         &lt;chr&gt;             &lt;chr&gt;\n 1 Olivia Miller Intro to R        C+   \n 2 Olivia Miller Calculus I        B+   \n 3 Olivia Miller Literary Analysis C    \n 4 Olivia Miller Statistics        C+   \n 5 Olivia Miller Machine Learning  C+   \n 6 Stacy Roberts Intro to R        A    \n 7 Stacy Roberts Machine Learning  A-   \n 8 Nate Anderson Calculus I        B    \n 9 Nate Anderson Machine Learning  C    \n10 Claire Young  Statistics        C+   \n# ℹ more rows",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introducing Databases</span>"
    ]
  },
  {
    "objectID": "Lecture-2.html#grouping-and-summarising",
    "href": "Lecture-2.html#grouping-and-summarising",
    "title": "2  Introducing Databases",
    "section": "2.7 Grouping and Summarising",
    "text": "2.7 Grouping and Summarising\nIn addition to selecting, filtering, and arranging the data, we can also summarize and group by different variables. In the code below we look at the “Enrollments” table, group by student_id to count how many courses each student is enrolled in. This allows us to count how many courses each student is enrolled in during the semester.\n\nclasses_per_student_query &lt;- \"SELECT student_id, COUNT(course_id)\n                              FROM Enrollments\n                              GROUP BY student_id\"\n\nstudents_per_class &lt;- dbGetQuery(db_con, classes_per_student_query)\nhead(students_per_class)\n\n  student_id COUNT(course_id)\n1          1                5\n2          2                2\n3          3                2\n4          4                2\n5          5                3\n6          6                3\n\ntbl(db_con, \"Enrollments\") |&gt; \n  group_by(student_id) |&gt;\n  summarise(count = n())\n\n# Source:   SQL [?? x 2]\n# Database: sqlite 3.50.4 [C:\\Data-330-Book\\college.db]\n   student_id count\n        &lt;int&gt; &lt;int&gt;\n 1          1     5\n 2          2     2\n 3          3     2\n 4          4     2\n 5          5     3\n 6          6     3\n 7          7     2\n 8          8     2\n 9          9     2\n10         10     4\n# ℹ more rows\n\n\nWe can also count the number of students enrolled in each course by running the following code:\n\nstudents_per_course_query &lt;-   \"SELECT course_id, COUNT(student_id)\n                               FROM Enrollments\n                               GROUP BY course_id\"\n\nstudents_per_course &lt;- dbGetQuery(db_con, students_per_course_query)\nhead(students_per_course)\n\n  course_id COUNT(student_id)\n1         1                18\n2         2                17\n3         3                17\n4         4                13\n5         5                18\n6         6                16\n\ntbl(db_con, \"Enrollments\") |&gt; \n  group_by(course_id) |&gt;\n  summarise(count = n())\n\n# Source:   SQL [10 x 2]\n# Database: sqlite 3.50.4 [C:\\Data-330-Book\\college.db]\n   course_id count\n       &lt;int&gt; &lt;int&gt;\n 1         1    18\n 2         2    17\n 3         3    17\n 4         4    13\n 5         5    18\n 6         6    16\n 7         7    18\n 8         8    15\n 9         9    14\n10        10    18",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introducing Databases</span>"
    ]
  },
  {
    "objectID": "Lecture-2.html#accessing-tables",
    "href": "Lecture-2.html#accessing-tables",
    "title": "2  Introducing Databases",
    "section": "2.3 Accessing Tables",
    "text": "2.3 Accessing Tables\nIf we want to access the tables within the database we can use the tbl() function while calling both the database connection and the table name. Notice that the output from tbl() does not load the full table into R; it only creates a reference to the table and shows a preview of the first few rows. This can be seen with the “Enrollments” and “Students” tables as it is not quite sure how many rows are present.\n\ntbl(db_con, \"Courses\")\n\n# Source:   table&lt;`Courses`&gt; [10 x 3]\n# Database: sqlite 3.50.4 [C:\\Data-330-Book\\college.db]\n   course_id course_name            credits\n       &lt;int&gt; &lt;chr&gt;                    &lt;int&gt;\n 1         1 Intro to R                   3\n 2         2 Biology 101                  3\n 3         3 World History                3\n 4         4 Algorithms                   4\n 5         5 Calculus I                   4\n 6         6 Psychology of Learning       3\n 7         7 Microeconomics               3\n 8         8 Literary Analysis            3\n 9         9 Statistics                   4\n10        10 Machine Learning             4\n\ntbl(db_con, \"Enrollments\")\n\n# Source:   table&lt;`Enrollments`&gt; [?? x 3]\n# Database: sqlite 3.50.4 [C:\\Data-330-Book\\college.db]\n   student_id course_id grade\n        &lt;int&gt;     &lt;int&gt; &lt;chr&gt;\n 1          1         8 C    \n 2          1         9 C+   \n 3          1         1 C+   \n 4          1        10 C+   \n 5          1         5 B+   \n 6          2        10 A-   \n 7          2         1 A    \n 8          3        10 C    \n 9          3         5 B    \n10          4        10 B    \n# ℹ more rows\n\ntbl(db_con, \"Students\")\n\n# Source:   table&lt;`Students`&gt; [?? x 5]\n# Database: sqlite 3.50.4 [C:\\Data-330-Book\\college.db]\n   student_id name             major              gpa year     \n        &lt;int&gt; &lt;chr&gt;            &lt;chr&gt;            &lt;dbl&gt; &lt;chr&gt;    \n 1          1 Olivia Miller    Business          3.29 Freshman \n 2          2 Stacy Roberts    Math              3.81 Sophomore\n 3          3 Nate Anderson    Math              3.37 Junior   \n 4          4 Claire Young     English           3.76 Freshman \n 5          5 Jake Young       History           2.97 Sophomore\n 6          6 Rachel Foster    Biology           3.56 Sophomore\n 7          7 Victor Underwood Biology           2.9  Freshman \n 8          8 Kate Owens       Biology           3.39 Senior   \n 9          9 Evelyn Ingram    Computer Science  3.22 Senior   \n10         10 Thomas Owens     Biology           2.9  Senior   \n# ℹ more rows\n\n\nIf we want to actually pull the table from the database and have it accessible in R then we will need to use the collect() function. In the code below we can see that we pull the data from the database and save it to some variable. We can then look at the first few observations (you can look at all of it, I am only looking at the first few as I do not want to display them all). We can also look at the dimensions of the table, which shows that there are 50 rows in the students at the college.\n\nstudents_table &lt;- tbl(db_con, \"Students\") |&gt; collect()\nstudents_table |&gt; head()\n\n# A tibble: 6 × 5\n  student_id name          major      gpa year     \n       &lt;int&gt; &lt;chr&gt;         &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;    \n1          1 Olivia Miller Business  3.29 Freshman \n2          2 Stacy Roberts Math      3.81 Sophomore\n3          3 Nate Anderson Math      3.37 Junior   \n4          4 Claire Young  English   3.76 Freshman \n5          5 Jake Young    History   2.97 Sophomore\n6          6 Rachel Foster Biology   3.56 Sophomore\n\nstudents_table |&gt; dim()\n\n[1] 50  5",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introducing Databases</span>"
    ]
  },
  {
    "objectID": "Lecture-2.html#disconnecting-from-the-database",
    "href": "Lecture-2.html#disconnecting-from-the-database",
    "title": "2  Introducing Databases",
    "section": "2.8 Disconnecting from the Database",
    "text": "2.8 Disconnecting from the Database\nOnce we have finished accessing a database, it is good practice to disconnect from it. This frees up resources on our computer (and the server we are connecting to). It also prevents us from accidentally writing or modifying the database and ensures other users can access and modify the data without issues.\n\ndbDisconnect(db_con)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introducing Databases</span>"
    ]
  }
]